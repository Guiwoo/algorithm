/**
 * 1 연산자 "=="
    - 비교 하는 값의 타입이 다를 경우 강제로 변환하여 비교 하므로 문제의 여지가 있음
    - 꼭 3문자 짜리 사용하자 === or !==
 */
const ex01 = () => {
  console.log("" == "0");
  false;
  console.log(0 == "");
  true;
  console.log(0 == "0");
  true;
};

/**
       * 2 with 문 
          -  객체 하나에 속한 속성들을 접근할때 사용하지만, 예측못한 결과를 줄수 있음
          with (obj) {
            a = b;
          }
          a = obj.b
          a = obj.b;
          obj.a = b
          obj.a = obj.b
          
          이 값중 하나인데 뭐가 실행 됬는지 알수 없고, 자바스크립트의 실행속도를 현저하게 느리게 만든다.
       */

/**
       * 3 eval
          - 문자열을 자바스크립트 컴파일에 넘긴후 실행, 가장 오용되는 기능중 하나
          ex> eval("me = myObject."+mykey+";")
          => me = myObject[myKey] 로 바꿔 쓸수 있음
          - 매우 읽기 어려우며 컴파일러 기동 을동ㄴ바해서 속도가 매우 느려질수 있다.
          - 문제점을 찾아내는툴 의 기능을 현저하게 떨어트린다.
          - 함수생성자도 eval의 또다른 형태이므로 사용을 피해야함
      */

/**
       * 4 continue
          - 이 구문을 지우면 100프로 성능향상
      */

/**
       * 5 다음 case 까지 실행하는 switch 구문
          - 명시적으로 벗어나지 않는다면 다음 case를 실행하는 경우 오류를 야기할수 있으니 피해야한다.
      */

/**
       * 6 블록이 없는문장
          - if/while/for/do 는 블록을 쓸수도 문장을 하나만 사용할수도 있으나, 버그를 만들수 있다.
              if(ok)
                  t = ture;
                  advance();
              
              this means 
              if(ok){
                  t = true
              }
              advance()
          이렇게 엄청나게 다른 의미, 이해하기 어렵게만든다.
      */

/**
       * 7 ++ , --
          - 이런 증감연산자는 버퍼 오버런 버그를 야기함, 스택오버플로우 반응이 개구림 ㅋㅋ
      */

/**
       * 8 비트연산자
          - 숫자를 정수형으로 바꾸고 연산후 다시 타입을 되돌림, 속도가 매우느림
          - 잠재된 버그를 만들어 낼수 있다.
      */

/**
       * 9 함수문장,함수표현식
          - function foo() {}
          - var foo = function foo() {}
          2번째 형식도 나쁘지않다, 함수도 값이나른것을 이해하는 것이 중요
          호이스팅 let 과 const,var 다 호이스팅 대상이나 ,var일경우 초기화를 진행
          전역변수에 추가 하고 싶지않을때는  (function foo(){})() 이런식으로 사용하자.
      */

/**
       * 10 데이터 타입 랩퍼
          - 데이터 타입 렙퍼들이 있다.
          ex> new Boolean(false) => 랩핑된 값을 반환하는 valueOf 메소드를 가진 객체를 생성
          {} [] 이걸로 그냥 하자.
      */

/**
       * 11 new
          - 프로토 타입 멤버들을 상속하는 객체를 생성하고이 객체를 this 에 바인딩해 피연산자를 호출,.
          - new 연산자를 빼먹게되면 전역변수를 호출하고 전역변수를 수정하게됨
          - new 연산자가 포함되어진다면 첫글자를 대문자로 표기하는 등, 의 방법을 유지
      */

/**
       * 12 void
          - js에서는 피연산자를 취급한후 undefined 를 반환하는 연산자 입니다. 유용하지않고, 매우혼동됨
          but typescript 에서 함수 타입정할떄 유용하게 사용되는 타입임
      */
