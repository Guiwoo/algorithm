const goodThing = () => {
  /**
  좋은점만 뽑아쓰자, 여러기능을 하는것보다 하나의 기능만을 하게 만드는것이 훌륭하다.
  
  1. 일급객체 인 함수
      -  단순화된 자바스크립트 에서 함수는 어휘적 유효범위를 갖는 람다
  2. 프로토타입을 상속을 하는 동적객체
      - 객체는 클래스가 필요 없다, 어떤 객체든지 단순히 할당하는 식으로 구성요소
      - 추가가능, 다른객체로 부터 상속을 받을수 있다.
  3. 객체 리터럴과 배열 리터럴
      - Json 이라는 데이터 교환영식에 영감을 주었습니다.
  */
};

/**
  나쁘지만 사용해야하는 부분들
  
  1. 전역변수
      - 가장나쁜점 언어가 전역변수에 기반하고 있다. 왜 문제야 ?
      - 링커가 없어서 컴파일 단위는 하나의 고용 객체에 로딩된다.
  
          //Declare
          //어느곳에도 속하지않는 위치에 var 를 이용
          var foo = "value";
          //전역객체에 직접속성을 추가
          global.foo1 = "value";
          //묵시적 전역버ㅕㄴ수 선없음, ?? 매우찾기힘든 버그를 만들기도한다.
          foo3 = "value";
  
   * 2. 유효범위(scope)
      - 자바스크립트는 c에서 가져옴
      - 블록유효범위를 제공하지 않ㅇ므 ,블록을 포함하는 함수 내부 모든곳에서 볼수 있다.
  
   * 3. 세미콜론으로 인한 버그
      - 자동으로 끝에 ; 를 붙여 문제를 픽스하려함,이거에 의존하면 의도하지 않은 에러를 야기
  
   * 4. 예약어
      - 변수,매개변수 이름으로 사용불가능
      - var method @ok
      - var class @wrong
      - object['switch'] @ok
      - object = {'if':value} @ok
  
   * 5. 유니코드
      - 16비트 글자상 한개인 문자가, 자바스크립트 상에서는 2개의 문자
  
   * 6. typeof
      - typeof 연산자는 null 과 object를 판별 불가능
  
   * 7. parseInt
      - 문자열을 정수로 바꿔주는 함수
      - 여분의 텍스트를 알려주지않고,날짜 및 시간 파싱할떄 오류 발생할수있음
      - parseInt(string,진수) 를 꼭써주자
  
   * 8. +
      - 덧셈을 하거나 문자열을 연결
      - 두연산자가 모두 숫자가 아닐경우 문자열로 반환 , 꼭 확인할것
  
   * 9. 부동소수점
      - 이진 부동소수점 은 소수부분을 제대로 처리하지 못한다.(0.1+0.2 === 0.3) 그렇지 않다
      - 돈관련 부분은 더욱정확히 하자, 소수점 자리만큼 10^n 을 곱해서 연산후 다시 그값만큼 나눠주는게 통상
  
   * 10.NaN
      - 숫자가 아님을 의미함 typeof NaN === "number" true
      - typeof 영산자는 nan 과 숫자를 구분못하고, nan 은 자신과 같지않다.
      - isNan()이라는 함수를 제공해줌
      - isFinite() 숫자확인시 최상의방법, 인자를넘길떄 Number() 를 이용하여 넘기자
  
   * 11. 가짜배열
      - 진정한 배열이 없다,성능에 있어 진짜 배열보다 꽤안좋다.
      - typeof 연산자는 배열과 객체를 구분하지 않는다.그래서 constructor을 확인 해봐야 한다.
  
   * 12. 많은 거짓값들
      - 엄청많음 0,false,NaN,undefined,"",null
      - 심지어 undefined,NaN 은상수도 아니야 전역변수라서 재정의할수있음 ㅋㅋ
  
   * 13. hasOwnProperty
      - for in 문제를 해결하기 위한 대안으로 필터역할을 했음
      - 함수가 아니라 매서드이기때문에 다른값으로 재 정의 할수 있음
  
   * 14. 객체
      - 프로토타입 체인상의 구성요소를 불러오기 때문에 온전히 비어있는 상태가 될수 없음.
      - += 연산자는 피연산자가 숫자가 아닐경우 연결한다.ㄴ
   */
